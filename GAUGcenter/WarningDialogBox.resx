<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAAAAAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABIAAAAAAAAAAAAAAAEAAAAA
        AAAAAAAA////AACQoAAQAAAAAKCwAADQ4AAAwNAAALDAAAAAEAAQkKAAAODwAPj//wAA0PAA8PDwAACY
        oADw//8AANDoAACosAAAoKAAABAQABDg8AAQoLAA4ODgABCwwAAQABAAACAgABCwsAAAECAAAJCYAACw
        sAAAoKgAMP//AACwuAAAwOAAANjwAACYsAAAmKgA///4AADw/wD/+PgAABgYAACguAAQEBAAENDgAADA
        2AAA4PgAEPD/ABCgoAB4eHgAkJCQAKioqAAQoMAAAKi4AAAoMAAAKCgAABAYACAgIAAAICgAALjIAHjI
        0AAA6PgAEOD/ACCQoAAwmJgAIHiAAAAYIAAAkKgA0NDQABhQUAAQEAAAoKCgADAwMAAQqLAAALDIAMjI
        yAAQwNAA4PDwADj//wAA4P8AGJCgABDA4AAgMDAAEFhgADBAQAAgkJgAEKCoAODY2AAoiIgAMDA4AACw
        0AAAyNAAEDAwAOD//wAAABgAAMjYABCQqAAg8P8A8PD/AKiYmAAAmJgAYJjAABCQmAAYYGgAALjAAHBw
        cAAggIgAUFBQAADI4AAQoLgAYGBgACiQoAAQUFAAANjoAACIkAAYsMAAENDoABiImABw+PgA6OjoAAAQ
        AABA//8ASP//ACCgqAAQODgAKDAwACgoKAAogIgAADhIACDA0ACw6PAAqODwAEDw/wDw+PgA+Pj4ABjo
        +AAA8PgA8PD4AP/4/wD/8PAAMDBAAACQsAAYODgASEhIACAoMADAwMAAWFhYACCwwAAgaGgAGHBwABjA
        0AAgYGgAMIiIABhwgAAA0NgAGIiAABCYmAAQOEgAIGh4ACBYYAAAGCgAADA4ACCAkAA4mKAAAOjwAACg
        wAAYcHgAEJioABCwuAAwiJgAGGhoABgYGAAYAAAA8ODgAEiwqAAAwMgAGICQABC4wAAQICgAMOD4ABDI
        0ADw6OgAiMDIACCosAAoeHgAEMjYAABAQAAAMDAAENjgADDI2AAA8PAAYPD/ABDg6AAg4PAAMODwAJD/
        /wCo//AAIPj/ACDg/wAo//8AIP//APD48AAY8P8AEOj4ABDg+ADg8P8A//D4AIiYmAB4YGAA0NDAAHBo
        cABQcHAAyLCwAIiAgABoiJAAwLjAAJiYmAAYKCgASICAAGh4gACIiJgAKJCQACBwcAAoiJAAQGBQABCY
        oAAQkJAAyMDAACBgUAAYiJAAGJCYAJiomACAeHAAOCAoAACgkACgsKAAgICAAACQkAAQOEAAkKCQAGBw
        YAA4MDgAmMDAAKiomAB4eGgAEGBoAFCosAC4yNgAkJCAAFhQWAAwICAAAIigAPDg8ACIiIgAMEhYAKDQ
        2AAwoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG1qjlNT8FhYWIuLWFiOkc8AAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCQkJCQkJCQkJCZ2eRFN8
        U46R0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCQkJAgkJ7AICAgICAg4c
        HBwcpW9bj4uObQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY2NjCQkCAgIJCQIJCQIC
        AgICAhwJTxwcHJZE2FiObQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvY1QJAgICAgICCQlP
        Pk8JCU8J4A4CAg4OAj4JCZ2N2EeRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8v4WMOAgI+r6Gl
        3ZRmZmZSUlJS9EBPAglfQgICDg4JCZN7UVNtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALy9jEgICDhLg
        nZy6KBMIAAAYAAAAGBtvaQICAgIJCQkCAhwJCW82jd8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHqEvYxwO
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////AAD///////8AAA//////8AAAA
        /////+AAAAA/////gAAAAB////4AAAAAB///+AAAAAAD///wAAAAAAH//+AAAAAAAP//gAAAAAAAf/8A
        AAAAAAA//gAAAAAAAB/+AAAAAAAAD/wAAAAAAAAP+AAAAAAAAAfwAAAAAAAAB/AAAAAAAAAD4AAAAAAA
        AAPgAAAAAAAAAcAAAAAAAAABwAAAAAAAAADAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAA4AAAAAAAAADgAAAAAAAAAPAAAAAAAAAB8AA
        AAAAAAAHwAAAAAAAAAfgAAAAAAAAD+AAAAAAAAAP8AAAAAAAAB/wAAAAAAAAH/gAAAAAAAA//AAAAAAA
        AH/+AAAAAAAA//4AAAAAAAD//wAAAAAAAf//gAAAAAAD///gAAAAAA////AAAAAAH///+AAAAAA////+
        AAAAAP////+AAAAD/////+AAAA///////AAAf///////wAf/////////////////////////
</value>
  </data>
</root>